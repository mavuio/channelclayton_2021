<div id="<%= @id %>" class="episode_edit_component">
  <%= live_component MyAppBe.Live.Components.CenteredModalComponent, phx_target: "##{@id}",  class: "sm:max-w-[90vw] sm:w-[600px] w-full" do %>
  <div class="my-8 episode_component_inner">



    <section phx-hook="TinyMceHook" id="tinymce_editors">
      <div x-data="{
         getEditorConf(target) {
           return {
             menubar: false,
             inline: true,
             target: target,
             plugins: ['visualblocks', 'code', 'autosave', 'link'],
             toolbar: [
               'undo redo | bold italic underline | h2 h3 h4 | link | visualblocks code '
             ],
             force_br_newlines : true,
             force_p_newlines : false,
             valid_elements: 'p,strong,em,span,a[href|target=_blank|title],ul,ol,li,h1,h2,h3,h4,br',
             init_instance_callback: function(editor) {
                editor.on('blur', function(e) {
                  editor.save();
                  //console.log('tinymce trigger save');
                });
             },
             skin_url: '/be_thirdparty/tinymce/skins/ui/oxide',
             setup: function(editor) {
                editor.on('init', function(e) {
                  editor.save();
                  //console.log('tinymce trigger save on init');
                });
              },
           };
         },
         initEditor(name) {
            const el = document.getElementById('fdata[' + name + ']');
                window.tinymce.init(this.getEditorConf(el));
          },
          initWhenTinymceIsAvailable() {
            console.log('#log 1632 init all the tinymces...');
              window.tinymce.remove();
              this.initEditor('summary');
          },
          init() {
              console.log('html snippet editor init');
              if(window.tinymce) {
                this.initWhenTinymceIsAvailable();
              } else {
                if(!window.tinymce_waitlist) {
                  window.tinymce_waitlist=[
                    ()=>this.initWhenTinymceIsAvailable()
                  ];
                }

              }

         }
       }">


        <%= f = form_for(@changeset, "#", [ as: :fdata, phx_change: :validate, phx_submit: :save, phx_target: "##{@id}"]) %>

        <%= input f, :num , label: "Num" %>

        <%= input f, :season_id , label: "Season", using: :select, items: MyApp.Seasons.get_for_dropdown() %>

        <%= input f, :title , label: "Title" %>
        <%= input f, :subtitle , label: "Subtitle" %>
        <%= input f, :link , label: "Link" %>
        <%= input f, :image , label: "Image-URL" %>
        <%= input f, :duration , label: "Duration (hh:mm:ss)" %>


        <div class="mt-4 text-sm text-gray-400">Text:</div>

        <div class="" phx-update="ignore">
          <%= input  f, :summary,  using: :textarea, rows: 50 ,append_classes: "editable ",
            wrapped_input: [update_html: :custom_fn],
            custom_fn: fn assigns -> %>
          <div class="prose-sm prose border border-gray-400 rounded">
            <div class="px-2 py-1 " id="<%= input_name(@form, @field) %>" x-ref="<%= @field %>">
              <%= input_value(@form, @field) |> raw() %></div>
          </div>
          <% end %>
        </div>



        <div class="my-4 text-right">
          <%= content_tag :button, "OK",class: "btn-outline-primary px-10" %>
        </div>

      </div>
    </section>

    </form>
  </div> <% end %> </div>
